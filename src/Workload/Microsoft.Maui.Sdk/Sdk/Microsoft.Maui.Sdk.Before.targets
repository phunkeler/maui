<Project>

  <PropertyGroup Condition=" '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'windows' ">
    <!-- All Windows apps require WinExe -->
    <OutputType Condition="'$(OutputType)' == 'Exe'">WinExe</OutputType>
    <!-- Generate ReadyToRun (AOT) when building for Release -->
    <PublishReadyToRun Condition=" '$(PublishReadyToRun)' == '' and '$(Configuration)' == 'Release' and '$(OutputType)' == 'WinExe' ">true</PublishReadyToRun>
    <!-- Use full RID graph: https://github.com/dotnet/docs/issues/36527 -->
    <UseRidGraph Condition=" '$(UseRidGraph)' == '' and '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'windows' ">true</UseRidGraph>
  </PropertyGroup>

  <!--
    The Windows App SDK does not support AnyCPU without a RID, so make sure we pick the "best" one we can.
  -->
  <PropertyGroup Condition=" '$(SingleProject)' == 'true' and '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'windows' ">
    <_SingleProjectRIDRequired Condition="'$(OutputType)' == 'WinExe'">true</_SingleProjectRIDRequired>
    <_SingleProjectRIDSpecified Condition="'$(RuntimeIdentifier)' != '' or '$(RuntimeIdentifiers)' != ''">true</_SingleProjectRIDSpecified>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(SingleProject)' == 'true' and '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'windows' and '$(_SingleProjectRIDRequired)' == 'true' and '$(_SingleProjectRIDSpecified)' != 'true' ">
    <_SingleProjectHostArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</_SingleProjectHostArchitecture>
    <_SingleProjectHostArchitecture>$(_SingleProjectHostArchitecture.ToLower())</_SingleProjectHostArchitecture>
    <RuntimeIdentifier Condition="'$(UseRidGraph)' == 'true'">win10-$(_SingleProjectHostArchitecture)</RuntimeIdentifier>
    <RuntimeIdentifier Condition="'$(UseRidGraph)' != 'true'">win-$(_SingleProjectHostArchitecture)</RuntimeIdentifier>
    <_MauiUsingDefaultRuntimeIdentifier>true</_MauiUsingDefaultRuntimeIdentifier>
  </PropertyGroup>
  
  <!--
    Update the SupportedOSPlatformVersion and TargetPlatformMinVersion properties to
    the .NET MAUI minimum supported versions if they are lower or missing.
  -->
  <PropertyGroup Condition="'$(TargetFramework)' != ''">
    <!-- Capture the current version information for logging. -->
    <_MauiPreviousSupportedOSPlatformVersion>$(SupportedOSPlatformVersion)</_MauiPreviousSupportedOSPlatformVersion>
    <_MauiPreviousTargetPlatformMinVersion>$(TargetPlatformMinVersion)</_MauiPreviousTargetPlatformMinVersion>
    <_MauiSupportedOSPlatformVersionWasAndroidMinimum Condition="'$(SupportedOSPlatformVersion)' != '' and $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android' and $([MSBuild]::VersionEquals('$(AndroidMinimumSupportedApiLevel).0', '$(SupportedOSPlatformVersion)'))">true</_MauiSupportedOSPlatformVersionWasAndroidMinimum>
    <!-- Windows has 2 properties that could be set, so if only 1 is set we copy it to the other. -->
    <TargetPlatformMinVersion   Condition="'$(TargetPlatformMinVersion)'  ==  '' and $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">$(SupportedOSPlatformVersion)</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion Condition="'$(SupportedOSPlatformVersion)' == '' and $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">$(TargetPlatformMinVersion)</SupportedOSPlatformVersion>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' != '' and '$(MauiDisableSupportedOSPlatformVersionValidation)' != 'true' and '$(MauiDisableOverrideSupportedOSPlatformVersion)' != 'true'">
    <!-- Record it the explicit version was lower than what we support so we can increase and log later. -->
    <_MauiHadToIncreaseSupportedOSPlatformVersion Condition="'$(SupportedOSPlatformVersion)' != '' and $([MSBuild]::VersionGreaterThan('$(_MauiMinimumSupportedOSPlatformVersion)', '$(SupportedOSPlatformVersion)'))">true</_MauiHadToIncreaseSupportedOSPlatformVersion>
    <_MauiHadToIncreaseTargetPlatformMinVersion   Condition="'$(TargetPlatformMinVersion)'  !=  '' and $([MSBuild]::VersionGreaterThan('$(_MauiMinimumSupportedOSPlatformVersion)', '$(TargetPlatformMinVersion)')) and $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">true</_MauiHadToIncreaseTargetPlatformMinVersion>
    <!-- Override the version numbers if they are too low. -->
    <SupportedOSPlatformVersion Condition="'$(_MauiHadToIncreaseSupportedOSPlatformVersion)' == 'true'">$(_MauiMinimumSupportedOSPlatformVersion)</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion   Condition="'$(_MauiHadToIncreaseTargetPlatformMinVersion)' == 'true' and $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">$(_MauiMinimumSupportedOSPlatformVersion)</TargetPlatformMinVersion>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)' != '' and '$(MauiDisableSupportedOSPlatformVersionValidation)' != 'true' and '$(MauiDisableImplicitSupportedOSPlatformVersion)' != 'true'">
    <!-- Specify the version numbers if they are missing. -->
    <SupportedOSPlatformVersion Condition="'$(_MauiHadToIncreaseSupportedOSPlatformVersion)' != 'true' and '$(SupportedOSPlatformVersion)' == ''">$(_MauiSupportedOSPlatformVersion)</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion   Condition="'$(_MauiHadToIncreaseTargetPlatformMinVersion)' != 'true'   and '$(TargetPlatformMinVersion)'  ==  '' and $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">$(_MauiSupportedOSPlatformVersion)</TargetPlatformMinVersion>
  </PropertyGroup>

  <!--
    Log a warning if the user specified a version that was lower than the minimum supported version.
  -->
  <Target
    Name="_CheckForMauiHadToIncreaseVersions"
    BeforeTargets="_CheckForInvalidConfigurationAndPlatform"
    Condition="'$(TargetFramework)' != '' and '$(MauiDisableSupportedOSPlatformVersionValidation)' != 'true' and '$(MauiDisableOverrideSupportedOSPlatformVersion)' != 'true'">
    <Warning
      Code="MA003"
      Condition="'$(_MauiHadToIncreaseSupportedOSPlatformVersion)' == 'true' and '$(_MauiSupportedOSPlatformVersionWasAndroidMinimum)' != 'true'"
      Text="SupportedOSPlatformVersion $(_MauiPreviousSupportedOSPlatformVersion) cannot be lower than the .NET MAUI minimum supported version $(_MauiSupportedOSPlatformVersion)." />
    <Warning
      Code="MA003"
      Condition="'$(_MauiHadToIncreaseTargetPlatformMinVersion)' == 'true' and '$(_MauiSupportedOSPlatformVersionWasAndroidMinimum)' != 'true'"
      Text="TargetPlatformMinVersion $(_MauiPreviousTargetPlatformMinVersion) cannot be lower than the .NET MAUI minimum supported version $(_MauiSupportedOSPlatformVersion)." />
    <!-- Android is special as it always has the min, so will always warn on blazor -->
    <Message
      Code="MA003"
      Condition="'$(_MauiHadToIncreaseSupportedOSPlatformVersion)' == 'true' and '$(_MauiSupportedOSPlatformVersionWasAndroidMinimum)' == 'true'"
      Text="SupportedOSPlatformVersion $(_MauiPreviousSupportedOSPlatformVersion) cannot be lower than the .NET MAUI minimum supported version $(_MauiSupportedOSPlatformVersion)." />
    <Warning
      Code="MA003"
      Condition="'$(_MauiHadToIncreaseTargetPlatformMinVersion)' == 'true' and '$(_MauiSupportedOSPlatformVersionWasAndroidMinimum)' == 'true'"
      Text="TargetPlatformMinVersion $(_MauiPreviousTargetPlatformMinVersion) cannot be lower than the .NET MAUI minimum supported version $(_MauiSupportedOSPlatformVersion)." />
  </Target>

</Project>
